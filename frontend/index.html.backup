<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PYUSD Subscription Service</title>
    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
        }
        h1 {
            font-size: 3rem;
            margin-bottom: 10px;
        }
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        /* Tab Navigation */
        .tab-nav {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }
        .tab-btn {
            padding: 12px 24px;
            background: rgba(255,255,255,0.9);
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .tab-btn:hover {
            background: white;
            transform: translateY(-2px);
        }
        .tab-btn.active {
            background: white;
            color: #667eea;
            font-weight: bold;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        
        .wallet-info, .dashboard-card, .admin-panel {
            background: rgba(255,255,255,0.95);
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }
        .wallet-info {
            text-align: center;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        .dashboard-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        .dashboard-item label {
            display: block;
            font-size: 0.85rem;
            color: #666;
            margin-bottom: 5px;
        }
        .dashboard-item .value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #333;
        }
        
        .plans {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 20px;
        }
        .plan-card {
            background: white;
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
            border: 2px solid transparent;
        }
        .plan-card:hover {
            transform: translateY(-5px);
            border-color: #667eea;
        }
        .plan-card.inactive {
            opacity: 0.5;
        }
        .plan-card.inactive::after {
            content: "Inactive";
            display: block;
            text-align: center;
            margin-top: 10px;
            padding: 5px;
            background: #f8d7da;
            color: #721c24;
            border-radius: 4px;
        }
        .plan-name {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 15px;
            color: #333;
        }
        .plan-price {
            font-size: 3rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }
        .plan-period {
            color: #666;
            margin-bottom: 10px;
        }
        .plan-subscribers {
            font-size: 0.9rem;
            color: #888;
            margin-bottom: 15px;
        }
        .btn {
            width: 100%;
            padding: 15px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.3s ease;
            margin-bottom: 8px;
        }
        .btn:hover {
            background: #5568d3;
        }
        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .btn-secondary {
            background: #28a745;
        }
        .btn-danger {
            background: #dc3545;
        }
        .btn-warning {
            background: #ffc107;
            color: #333;
        }
        .connect-btn {
            padding: 12px 30px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            margin: 5px;
        }
        .status-message {
            margin-top: 15px;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
            word-break: break-word;
        }
        .success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .loading {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        .info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        
        /* Allowance Section */
        .allowance-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .input-group {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        .input-group input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        /* Admin Panel */
        .admin-section {
            margin-bottom: 25px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }
        .admin-section h3 {
            margin-bottom: 15px;
            color: #333;
        }
        .info-box {
            background: #e7f3ff;
            padding: 10px;
            border-radius: 4px;
            margin: 10px 0;
            font-size: 0.9rem;
        }
        
        /* Transaction Status */
        .tx-status {
            margin-top: 10px;
            padding: 10px;
            background: #fff3cd;
            border-radius: 4px;
            font-size: 0.9rem;
        }
        .tx-status a {
            color: #667eea;
            text-decoration: none;
        }
        .tx-status a:hover {
            text-decoration: underline;
        }
        
        /* Permit Info */
        .permit-info {
            background: #e7f3ff;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            font-size: 0.9rem;
            line-height: 1.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üí∞ PYUSD Subscription Service</h1>
            <p class="subtitle">Next-generation decentralized subscription service</p>
        </header>

        <div class="wallet-info">
            <div id="wallet-status">Please connect your wallet</div>
            <button class="connect-btn" id="wallet-btn" onclick="connectWallet()">Connect Wallet</button>
            <button class="connect-btn" id="switch-btn" onclick="switchAccount()" style="display: none;">Switch Account</button>
            <button class="connect-btn" id="disconnect-btn" onclick="disconnectWallet()" style="display: none;">Disconnect</button>
            <div id="status-message" class="status-message" style="display: none;"></div>
        </div>

        <!-- Tab Navigation -->
        <div class="tab-nav">
            <button class="tab-btn active" onclick="switchTab('plans')">üì¶ Plans</button>
            <button class="tab-btn" onclick="switchTab('dashboard')">üìä Dashboard</button>
            <button class="tab-btn" onclick="switchTab('allowance')">üîê Allowance</button>
            <button class="tab-btn" id="admin-tab" onclick="switchTab('admin')" style="display: none;">‚öôÔ∏è Admin</button>
        </div>

        <!-- Plans Tab -->
        <div id="plans-tab" class="tab-content active">
            <div class="plans" id="plans-container">
                <div class="plan-card">
                    <div class="plan-name">üì¶ Loading...</div>
                    <div class="plan-price">-</div>
                    <div class="plan-period">-</div>
                    <button class="btn" disabled>Loading...</button>
                </div>
            </div>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard-tab" class="tab-content">
            <div class="dashboard-card">
                <h2 style="margin-bottom: 20px;">Your Subscription</h2>
                <div id="dashboard-content">
                    <p style="text-align: center; color: #666;">Connect your wallet to view your subscription details</p>
                </div>
            </div>
        </div>

        <!-- Allowance Tab -->
        <div id="allowance-tab" class="tab-content">
            <div class="dashboard-card">
                <h2 style="margin-bottom: 20px;">PYUSD Allowance</h2>
                <div id="allowance-content">
                    <p style="text-align: center; color: #666;">Connect your wallet to view allowance</p>
                </div>
            </div>
        </div>

        <!-- Admin Tab -->
        <div id="admin-tab-content" class="tab-content">
            <div class="admin-panel" id="admin-content">
                <h2>Admin Panel</h2>
                <p>Only the contract owner can access this panel.</p>
            </div>
        </div>
    </div>

    <script>
        // Wait for ethers to be loaded
        window.addEventListener('load', function() {
            if (typeof ethers === 'undefined') {
                console.error('ethers.js not loaded');
                document.getElementById('wallet-status').innerHTML = 
                    '‚ùå Error: ethers.js failed to load. Please refresh the page.';
                return;
            }
            console.log('ethers.js version:', ethers.version);
            
            initApp();
        });

        function initApp() {
            // Contract addresses
            const CONTRACT_ADDRESS = '0x3D8bE24704F15B7F290B986efced351f31e5B313';
            const PYUSD_ADDRESS = '0xCaC524BcA292aaade2DF8A05cC58F0a65B1B3bB9';
            const CHAIN_ID = 11155111; // Sepolia
            
            let provider = null;
            let signer = null;
            let account = null;
            let contract = null;
            let pyusdContract = null;
            
            // Contract ABI
            const CONTRACT_ABI = [
                "function subscribe(uint256 planId) external",
                "function subscribeWithPermit(uint256 planId, uint8 v, bytes32 r, bytes32 s, uint256 deadline) external",
                "function cancelSubscription() external",
                "function isSubscribed(address user) external view returns (bool)",
                "function getUserSubscription(address user) external view returns (uint256 planId, uint256 startTime, uint256 nextBillingDate, bool active, uint256 totalPaid)",
                "function plans(uint256) external view returns (string memory name, uint256 price, uint256 billingPeriod, uint256 maxSubscribers, bool active, uint256 currentSubscribers)",
                "function getPlan(uint256 planId) external view returns (string memory name, uint256 price, uint256 billingPeriod, uint256 maxSubscribers, bool active, uint256 currentSubscribers)",
                "function getPlanCount() external view returns (uint256)",
                "function pause() external",
                "function unpause() external",
                "function paused() external view returns (bool)",
                "function createPlan(string memory name, uint256 price, uint256 billingPeriod, uint256 maxSubscribers) external returns (uint256)",
                "function updatePlanStatus(uint256 planId, bool active) external",
                "function setPullerAuthorization(address puller, bool authorized) external",
                "function emergencyWithdraw(uint256 amount) external",
                "function owner() external view returns (address)"
            ];
            
            const PYUSD_ABI = [
                "function approve(address spender, uint256 amount) external returns (bool)",
                "function allowance(address owner, address spender) external view returns (uint256)",
                "function balanceOf(address account) external view returns (uint256)",
                "function name() external view returns (string memory)",
                "function symbol() external view returns (string memory)",
                "function decimals() external view returns (uint8)",
                "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external",
                "function DOMAIN_SEPARATOR() external view returns (bytes32)",
                "function nonces(address owner) external view returns (uint256)"
            ];

            // Global functions
            async function connectWallet() {
                if (typeof window.ethereum !== 'undefined') {
                    try {
                        showStatus('Connecting to wallet...', 'loading');
                        
                        provider = new ethers.providers.Web3Provider(window.ethereum);
                        await provider.send("eth_requestAccounts", []);
                        signer = provider.getSigner();
                        account = await signer.getAddress();
                        
                        // Check and switch to Sepolia network
                        const network = await provider.getNetwork();
                        if (network.chainId !== CHAIN_ID) {
                            showStatus('Switching to Sepolia network...', 'loading');
                            try {
                                await window.ethereum.request({
                                    method: 'wallet_switchEthereumChain',
                                    params: [{ chainId: '0xaa36a7' }],
                                });
                                location.reload();
                                return;
                            } catch (switchError) {
                                if (switchError.code === 4902) {
                                    await window.ethereum.request({
                                        method: 'wallet_addEthereumChain',
                                        params: [{
                                            chainId: '0xaa36a7',
                                            chainName: 'Sepolia Test Network',
                                            nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },
                                            rpcUrls: ['https://ethereum-sepolia-rpc.publicnode.com'],
                                            blockExplorerUrls: ['https://sepolia.etherscan.io']
                                        }],
                                    });
                                    location.reload();
                                    return;
                                }
                                throw switchError;
                            }
                        }
                        
                        // Initialize contracts
                        contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
                        pyusdContract = new ethers.Contract(PYUSD_ADDRESS, PYUSD_ABI, signer);
                        
                        document.getElementById('wallet-status').innerHTML = 
                            `‚úÖ Connected: ${account.substring(0,6)}...${account.substring(38)}`;
                        
                        document.getElementById('wallet-btn').style.display = 'none';
                        document.getElementById('switch-btn').style.display = 'inline-block';
                        document.getElementById('disconnect-btn').style.display = 'inline-block';
                        
                        // Check balance and load data
                        await checkBalance();
                        await loadPlans();
                        await loadDashboard();
                        await loadAllowance();
                        await checkAdminAccess();
                        
                        clearStatus();
                    } catch (error) {
                        showStatus('Failed to connect wallet: ' + error.message, 'error');
                    }
                } else {
                    showStatus('Please install MetaMask', 'error');
                }
            }

            async function checkBalance() {
                try {
                    const balance = await pyusdContract.balanceOf(account);
                    const balanceFormatted = ethers.utils.formatUnits(balance, 6);
                    if (balance.gt(0)) {
                        showStatus(`You have ${balanceFormatted} PYUSD`, 'success');
                    } else {
                        showStatus(`Warning: You have ${balanceFormatted} PYUSD`, 'error');
                    }
                } catch (error) {
                    console.error('Error checking balance:', error);
                }
            }

            async function loadPlans() {
                try {
                    const planCount = await contract.getPlanCount();
                    const plansContainer = document.getElementById('plans-container');
                    plansContainer.innerHTML = '';
                    
                    for (let i = 0; i < planCount; i++) {
                        const plan = await contract.getPlan(i);
                        if (plan.active) {
                            const planCard = createPlanCard(i, plan);
                            plansContainer.appendChild(planCard);
                        }
                    }
                } catch (error) {
                    console.error('Error loading plans:', error);
                }
            }

            function createPlanCard(planId, plan) {
                const card = document.createElement('div');
                card.className = 'plan-card';
                
                const price = ethers.utils.formatUnits(plan.price, 6);
                const billingDays = Math.floor(plan.billingPeriod / 86400);
                
                card.innerHTML = `
                    <div class="plan-name">üì¶ ${plan.name}</div>
                    <div class="plan-price">${price} PYUSD</div>
                    <div class="plan-period">per ${billingDays} days</div>
                    <div class="plan-subscribers">${plan.currentSubscribers} subscribers</div>
                    <button class="btn" onclick="subscribe(${planId})">Subscribe</button>
                    <button class="btn btn-secondary" onclick="subscribeWithPermit(${planId})">Subscribe with Permit</button>
                `;
                
                return card;
            }

            async function subscribe(planId) {
                try {
                    showStatus('Fetching plan details...', 'loading');
                    const plan = await contract.getPlan(planId);
                    const price = plan.price;
                    
                    // Check balance
                    const balance = await pyusdContract.balanceOf(account);
                    if (balance.lt(price)) {
                        showStatus(`Insufficient PYUSD balance. You need ${ethers.utils.formatUnits(price, 6)} PYUSD.`, 'error');
                        return;
                    }

                    // Check allowance
                    const allowance = await pyusdContract.allowance(account, CONTRACT_ADDRESS);
                    if (allowance.lt(price)) {
                        showStatus('Approving PYUSD spending...', 'loading');
                        const approveTx = await pyusdContract.approve(CONTRACT_ADDRESS, price);
                        showStatus('Waiting for approval confirmation...', 'loading');
                        const receipt = await approveTx.wait();
                        addTransactionLink(receipt.transactionHash);
                        showStatus('Approval confirmed! Processing subscription...', 'loading');
                    }

                    showStatus('Subscribing...', 'loading');
                    const tx = await contract.subscribe(planId);
                    showStatus('Transaction submitted! Waiting for confirmation...', 'loading');
                    const receipt = await tx.wait();
                    
                    showStatus(`Successfully subscribed to ${plan.name}!`, 'success');
                    addTransactionLink(receipt.transactionHash);
                    
                    await loadDashboard();
                    await loadPlans();
                } catch (error) {
                    const errorMsg = error.reason || error.data?.message || error.message;
                    showStatus('Subscription failed: ' + errorMsg, 'error');
                    console.error('Subscribe error:', error);
                }
            }

            async function subscribeWithPermit(planId) {
                try {
                    showStatus('Preparing Permit signature...', 'loading');
                    const plan = await contract.getPlan(planId);
                    const value = plan.price;
                    
                    // Check balance
                    const balance = await pyusdContract.balanceOf(account);
                    if (balance.lt(value)) {
                        showStatus(`Insufficient PYUSD balance. You need ${ethers.utils.formatUnits(value, 6)} PYUSD.`, 'error');
                        return;
                    }

                    // Get nonce
                    const nonce = await pyusdContract.nonces(account);
                    const deadline = Math.floor(Date.now() / 1000) + 3600; // 1 hour from now
                    
                    // Get domain separator
                    const domainSeparator = await pyusdContract.DOMAIN_SEPARATOR();
                    
                    // Create permit message
                    const permitTypes = {
                        Permit: [
                            { name: 'owner', type: 'address' },
                            { name: 'spender', type: 'address' },
                            { name: 'value', type: 'uint256' },
                            { name: 'nonce', type: 'uint256' },
                            { name: 'deadline', type: 'uint256' }
                        ]
                    };
                    
                    const permitMessage = {
                        owner: account,
                        spender: CONTRACT_ADDRESS,
                        value: value,
                        nonce: nonce,
                        deadline: deadline
                    };
                    
                    // Get network for chainId
                    const network = await provider.getNetwork();
                    
                    // Build domain
                    const domain = {
                        name: 'PayPal USD',
                        version: '1',
                        chainId: network.chainId,
                        verifyingContract: PYUSD_ADDRESS
                    };
                    
                    // Request signature
                    showStatus('Please sign the Permit message in MetaMask...', 'loading');
                    const signature = await signer._signTypedData(domain, permitTypes, permitMessage);
                    
                    // Extract v, r, s
                    const sig = ethers.utils.splitSignature(signature);
                    
                    // Call subscribeWithPermit
                    showStatus('Submitting subscription with Permit...', 'loading');
                    const tx = await contract.subscribeWithPermit(planId, sig.v, sig.r, sig.s, deadline);
                    showStatus('Transaction submitted! Waiting for confirmation...', 'loading');
                    const receipt = await tx.wait();
                    
                    showStatus(`Successfully subscribed using Permit!`, 'success');
                    addTransactionLink(receipt.transactionHash);
                    
                    await loadDashboard();
                    await loadPlans();
                } catch (error) {
                    const errorMsg = error.reason || error.data?.message || error.message;
                    showStatus('Permit subscription failed: ' + errorMsg, 'error');
                    console.error('Permit error:', error);
                }
            }

            async function loadDashboard() {
                try {
                    const isSubscribed = await contract.isSubscribed(account);
                    const dashboardContent = document.getElementById('dashboard-content');
                    
                    if (isSubscribed) {
                        const sub = await contract.getUserSubscription(account);
                        const plan = await contract.getPlan(sub.planId);
                        const planName = plan.name;
                        const price = ethers.utils.formatUnits(sub.totalPaid, 6);
                        const nextBilling = new Date(sub.nextBillingDate * 1000).toLocaleDateString();
                        
                        dashboardContent.innerHTML = `
                            <div class="dashboard-grid">
                                <div class="dashboard-item">
                                    <label>Plan</label>
                                    <div class="value">${planName}</div>
                                </div>
                                <div class="dashboard-item">
                                    <label>Status</label>
                                    <div class="value" style="color: ${sub.active ? '#28a745' : '#dc3545'}">${sub.active ? 'Active' : 'Inactive'}</div>
                                </div>
                                <div class="dashboard-item">
                                    <label>Total Paid</label>
                                    <div class="value">${price} PYUSD</div>
                                </div>
                                <div class="dashboard-item">
                                    <label>Next Billing</label>
                                    <div class="value">${nextBilling}</div>
                                </div>
                            </div>
                            <button class="btn btn-danger" onclick="cancelSubscription()">Cancel Subscription</button>
                        `;
                    } else {
                        dashboardContent.innerHTML = '<p style="text-align: center; color: #666;">You are not subscribed to any plan yet.</p>';
                    }
                } catch (error) {
                    console.error('Error loading dashboard:', error);
                }
            }

            async function cancelSubscription() {
                if (!confirm('Are you sure you want to cancel your subscription?')) return;
                
                try {
                    showStatus('Cancelling subscription...', 'loading');
                    const tx = await contract.cancelSubscription();
                    showStatus('Transaction submitted! Waiting for confirmation...', 'loading');
                    const receipt = await tx.wait();
                    
                    showStatus('Subscription cancelled successfully!', 'success');
                    addTransactionLink(receipt.transactionHash);
                    
                    await loadDashboard();
                } catch (error) {
                    const errorMsg = error.reason || error.data?.message || error.message;
                    showStatus('Cancellation failed: ' + errorMsg, 'error');
                    console.error('Cancel error:', error);
                }
            }

            async function loadAllowance() {
                try {
                    const allowance = await pyusdContract.allowance(account, CONTRACT_ADDRESS);
                    const allowanceFormatted = ethers.utils.formatUnits(allowance, 6);
                    
                    const allowanceContent = document.getElementById('allowance-content');
                    allowanceContent.innerHTML = `
                        <div class="allowance-section">
                            <h3 style="margin-bottom: 15px;">Current Allowance</h3>
                            <p style="font-size: 1.5rem; font-weight: bold; color: #667eea;">${allowanceFormatted} PYUSD</p>
                            <p style="margin-top: 10px; color: #666; font-size: 0.9rem;">
                                This is the amount the contract can withdraw from your wallet for subscriptions.
                            </p>
                        </div>
                        <div class="allowance-section">
                            <h3 style="margin-bottom: 15px;">Update Allowance</h3>
                            <div class="input-group">
                                <input type="number" id="allowance-amount" step="0.01" placeholder="Amount (PYUSD)" />
                                <button class="btn" onclick="updateAllowance()">Approve</button>
                            </div>
                            <p style="margin-top: 10px; color: #666; font-size: 0.9rem;">
                                Set a higher allowance to avoid approving for each subscription.
                            </p>
                        </div>
                    `;
                } catch (error) {
                    console.error('Error loading allowance:', error);
                }
            }

            async function updateAllowance() {
                const amountInput = document.getElementById('allowance-amount');
                const amount = parseFloat(amountInput.value);
                
                if (isNaN(amount) || amount <= 0) {
                    showStatus('Please enter a valid amount', 'error');
                    return;
                }
                
                try {
                    showStatus('Approving PYUSD...', 'loading');
                    const approveAmount = ethers.utils.parseUnits(amount.toString(), 6);
                    const tx = await pyusdContract.approve(CONTRACT_ADDRESS, approveAmount);
                    showStatus('Transaction submitted! Waiting for confirmation...', 'loading');
                    const receipt = await tx.wait();
                    
                    showStatus(`Allowance updated to ${amount} PYUSD!`, 'success');
                    addTransactionLink(receipt.transactionHash);
                    
                    await loadAllowance();
                } catch (error) {
                    const errorMsg = error.reason || error.data?.message || error.message;
                    showStatus('Approval failed: ' + errorMsg, 'error');
                    console.error('Approve error:', error);
                }
            }

            async function checkAdminAccess() {
                try {
                    const owner = await contract.owner();
                    if (owner.toLowerCase() === account.toLowerCase()) {
                        document.getElementById('admin-tab').style.display = 'inline-block';
                        await loadAdminPanel();
                    }
                } catch (error) {
                    console.error('Error checking admin access:', error);
                }
            }

            async function loadAdminPanel() {
                const adminContent = document.getElementById('admin-content');
                const isPaused = await contract.paused();
                const contractBalance = await pyusdContract.balanceOf(CONTRACT_ADDRESS);
                const balanceFormatted = ethers.utils.formatUnits(contractBalance, 6);
                
                adminContent.innerHTML = `
                    <h2 style="margin-bottom: 20px;">Admin Panel</h2>
                    
                    <div class="info-box">
                        <strong>Contract Status:</strong> ${isPaused ? '<span style="color: #dc3545;">PAUSED</span>' : '<span style="color: #28a745;">ACTIVE</span>'}
                    </div>
                    <div class="info-box">
                        <strong>Contract Balance:</strong> ${balanceFormatted} PYUSD
                    </div>
                    
                    <div class="admin-section">
                        <h3>Contract Control</h3>
                        ${isPaused ? 
                            '<button class="btn btn-success" onclick="unpauseContract()">Unpause Contract</button>' :
                            '<button class="btn btn-warning" onclick="pauseContract()">Pause Contract</button>'
                        }
                    </div>
                    
                    <div class="admin-section">
                        <h3>Create New Plan</h3>
                        <div class="input-group">
                            <input type="text" id="plan-name" placeholder="Plan Name" style="flex: 1;" />
                            <input type="number" id="plan-price" step="0.01" placeholder="Price (PYUSD)" style="flex: 1;" />
                            <input type="number" id="plan-days" placeholder="Days" style="flex: 1;" />
                        </div>
                        <button class="btn" onclick="createPlan()" style="margin-top: 10px;">Create Plan</button>
                    </div>
                    
                    <div class="admin-section">
                        <h3>Emergency Withdrawal</h3>
                        <div class="input-group">
                            <input type="number" id="withdraw-amount" step="0.01" placeholder="Amount (PYUSD)" />
                            <button class="btn btn-danger" onclick="emergencyWithdraw()">Withdraw</button>
                        </div>
                    </div>
                `;
            }

            async function pauseContract() {
                try {
                    showStatus('Pausing contract...', 'loading');
                    const tx = await contract.pause();
                    const receipt = await tx.wait();
                    showStatus('Contract paused successfully!', 'success');
                    addTransactionLink(receipt.transactionHash);
                    await loadAdminPanel();
                } catch (error) {
                    showStatus('Failed to pause: ' + error.message, 'error');
                }
            }

            async function unpauseContract() {
                try {
                    showStatus('Unpausing contract...', 'loading');
                    const tx = await contract.unpause();
                    const receipt = await tx.wait();
                    showStatus('Contract unpaused successfully!', 'success');
                    addTransactionLink(receipt.transactionHash);
                    await loadAdminPanel();
                } catch (error) {
                    showStatus('Failed to unpause: ' + error.message, 'error');
                }
            }

            async function createPlan() {
                const name = document.getElementById('plan-name').value;
                const price = document.getElementById('plan-price').value;
                const days = document.getElementById('plan-days').value;
                
                if (!name || !price || !days) {
                    showStatus('Please fill in all fields', 'error');
                    return;
                }
                
                try {
                    showStatus('Creating plan...', 'loading');
                    const priceWei = ethers.utils.parseUnits(price, 6);
                    const billingPeriod = parseInt(days) * 86400;
                    const tx = await contract.createPlan(name, priceWei, billingPeriod, 0);
                    const receipt = await tx.wait();
                    showStatus(`Plan "${name}" created successfully!`, 'success');
                    addTransactionLink(receipt.transactionHash);
                    
                    document.getElementById('plan-name').value = '';
                    document.getElementById('plan-price').value = '';
                    document.getElementById('plan-days').value = '';
                    
                    await loadPlans();
                    await loadAdminPanel();
                } catch (error) {
                    showStatus('Failed to create plan: ' + error.message, 'error');
                }
            }

            async function emergencyWithdraw() {
                const amount = document.getElementById('withdraw-amount').value;
                
                if (!amount) {
                    showStatus('Please enter an amount', 'error');
                    return;
                }
                
                try {
                    showStatus('Processing withdrawal...', 'loading');
                    const amountWei = ethers.utils.parseUnits(amount, 6);
                    const tx = await contract.emergencyWithdraw(amountWei);
                    const receipt = await tx.wait();
                    showStatus(`Withdrew ${amount} PYUSD successfully!`, 'success');
                    addTransactionLink(receipt.transactionHash);
                    
                    document.getElementById('withdraw-amount').value = '';
                    await loadAdminPanel();
                } catch (error) {
                    showStatus('Withdrawal failed: ' + error.message, 'error');
                }
            }

            function switchTab(tabName) {
                document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                
                event.target.classList.add('active');
                document.getElementById(`${tabName}-tab`).classList.add('active');
            }

            function addTransactionLink(txHash) {
                const statusDiv = document.getElementById('status-message');
                const txUrl = `https://sepolia.etherscan.io/tx/${txHash}`;
                statusDiv.innerHTML = statusDiv.textContent + `<br><a href="${txUrl}" target="_blank">View on Etherscan</a>`;
            }

            async function switchAccount() {
                try {
                    showStatus('Switching account...', 'loading');
                    await window.ethereum.request({
                        method: 'wallet_requestPermissions',
                        params: [{ eth_accounts: {} }]
                    });
                    
                    const accounts = await window.ethereum.request({ method: 'eth_accounts' });
                    if (accounts.length === 0) {
                        showStatus('No account selected', 'error');
                        return;
                    }
                    
                    signer = provider.getSigner();
                    account = await signer.getAddress();
                    
                    contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
                    pyusdContract = new ethers.Contract(PYUSD_ADDRESS, PYUSD_ABI, signer);
                    
                    document.getElementById('wallet-status').innerHTML = 
                        `‚úÖ Connected: ${account.substring(0,6)}...${account.substring(38)}`;
                    
                    await checkBalance();
                    await loadDashboard();
                    await loadAllowance();
                    await checkAdminAccess();
                    
                } catch (error) {
                    showStatus('Failed to switch account: ' + error.message, 'error');
                }
            }

            function disconnectWallet() {
                provider = null;
                signer = null;
                account = null;
                contract = null;
                pyusdContract = null;
                
                document.getElementById('wallet-status').innerHTML = 'Please connect your wallet';
                document.getElementById('wallet-btn').style.display = 'inline-block';
                document.getElementById('switch-btn').style.display = 'none';
                document.getElementById('disconnect-btn').style.display = 'none';
                
                document.getElementById('dashboard-content').innerHTML = '<p style="text-align: center; color: #666;">Connect your wallet to view your subscription details</p>';
                document.getElementById('allowance-content').innerHTML = '<p style="text-align: center; color: #666;">Connect your wallet to view allowance</p>';
                
                document.getElementById('admin-tab').style.display = 'none';
                
                showStatus('Wallet disconnected', 'success');
            }

            function showStatus(message, type) {
                const statusDiv = document.getElementById('status-message');
                statusDiv.textContent = message;
                statusDiv.className = `status-message ${type}`;
                statusDiv.style.display = 'block';
            }

            function clearStatus() {
                setTimeout(() => {
                    document.getElementById('status-message').style.display = 'none';
                }, 3000);
            }

            // Make functions global
            window.connectWallet = connectWallet;
            window.switchAccount = switchAccount;
            window.disconnectWallet = disconnectWallet;
            window.subscribe = subscribe;
            window.subscribeWithPermit = subscribeWithPermit;
            window.cancelSubscription = cancelSubscription;
            window.updateAllowance = updateAllowance;
            window.pauseContract = pauseContract;
            window.unpauseContract = unpauseContract;
            window.createPlan = createPlan;
            window.emergencyWithdraw = emergencyWithdraw;
            window.switchTab = switchTab;

            // Check if wallet is already connected
            if (typeof window.ethereum !== 'undefined') {
                window.ethereum.request({ method: 'eth_accounts' })
                    .then(async accounts => {
                        if (accounts.length > 0) {
                            await connectWallet();
                        }
                    });
            }
        }
    </script>
</body>
</html>
